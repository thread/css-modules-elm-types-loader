const {
  cssFileNameToElmFileName,
  generateElmModuleForStyles,
} = require('../src/css-module-parser')

describe('cssFileNameToElmFileName', () => {
  it('writes to the same directory with a file called Styles.elm', () => {
    const filename = cssFileNameToElmFileName('frontend/app/EmailInput/email_input.scss')
    expect(filename).toEqual('frontend/app/EmailInput/Styles.elm')
  })
})

describe('generateElmModuleForStyles', () => {
  const cssClasses = ['inputField', 'formHeading']

  const filename = 'frontend/app/EmailInput/email_input.scss'

  it('generates the right module name', () => {
    const result = generateElmModuleForStyles(cssClasses, filename)
    expect(result).toContain('module EmailInput.Styles exposing (Styles)')
  })

  it('generates a comment so the user knows not to edit by hand', () => {
    const result = generateElmModuleForStyles(cssClasses, filename)
    expect(result).toContain('-- This is auto generated by Webpack')
    expect(result).toContain('-- whenever email_input.scss is edited')
    expect(result).toContain('-- you do not want to edit this by hand')
  })

  it('generates the right type alias', () => {
    const result = generateElmModuleForStyles(cssClasses, filename)
    expect(result).toContain(`type alias Styles = {
  inputField: String, formHeading: String
}`)
  })

  it('matches the snapshot', () => {
    const result = generateElmModuleForStyles(cssClasses, filename)
    expect(result).toMatchSnapshot()
  })
})
